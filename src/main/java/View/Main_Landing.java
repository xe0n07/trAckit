/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;
import Controller.Controller;
import Model.Product;
import View.Main_Landing.StatusCellRenderer;
import Model.OrderTableModel;
import Model.SalesTableModel;
import Model.StocksTableModel;
import Model.Order;
import Model.ProductTableModel;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import java.awt.*;
import javax.swing.table.*;
import javax.swing.JOptionPane;

/**
 *
 * 
 * @author Nabin
 */
public class Main_Landing extends javax.swing.JFrame {
    private final Controller controller = new Controller();
    private ProductTableModel productTableModel;
    private OrderTableModel orderTableModel;
    private JComboBox<String> monthCombo;

    /**
     * Creates new form Main_Landing
     */
    public Main_Landing() {
        initComponents();
        setLocationRelativeTo(null);
        show_win.add(Dashboard, "Dashboard");
        show_win.add(Products, "Products");
        show_win.add(Orders, "Orders");
        show_win.add(Sales, "Sales");
        show_win.add(Stocks, "Stocks");
        CardLayout card = (CardLayout)show_win.getLayout();
        card.show(show_win, "Dashboard");

        // Initialize Products tab
        initProductsTab();
        // Initialize Orders tab
        initOrdersTab();
        // Initialize Dashboard tab
        initDashboardTab();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nav = new javax.swing.JPanel();
        dashboardbtn = new javax.swing.JButton();
        productsbtn = new javax.swing.JButton();
        ordersbtn = new javax.swing.JButton();
        salesbtn = new javax.swing.JButton();
        stocksbtn = new javax.swing.JButton();
        logoutbtn1 = new javax.swing.JButton();
        Logo = new javax.swing.JLabel();
        show_win = new javax.swing.JPanel();
        Products = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        product_table = new javax.swing.JTable();
        Dashboard = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jTextField24 = new javax.swing.JTextField();
        jTextField25 = new javax.swing.JTextField();
        jTextField26 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jTextField21 = new javax.swing.JTextField();
        jTextField22 = new javax.swing.JTextField();
        jTextField23 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jTextField14 = new javax.swing.JTextField();
        jTextField15 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        Orders = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orders_table = new javax.swing.JTable();
        Sales = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        sales_table = new javax.swing.JTable();
        Stocks = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        stocks_table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nav.setBackground(new java.awt.Color(0, 204, 255));

        dashboardbtn.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        dashboardbtn.setIcon(new javax.swing.ImageIcon("D:\\Trackit_20thJune\\src\\main\\java\\resources\\Images\\image-removebg-preview-3 (1).png")); // NOI18N
        dashboardbtn.setText("Dashboard");
        dashboardbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dashboardbtnMouseClicked(evt);
            }
        });

        productsbtn.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        productsbtn.setIcon(new javax.swing.ImageIcon("D:\\Trackit_20thJune\\src\\main\\java\\resources\\Images\\box.png")); // NOI18N
        productsbtn.setText("Products");
        productsbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productsbtnMouseClicked(evt);
            }
        });

        ordersbtn.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        ordersbtn.setIcon(new javax.swing.ImageIcon("D:\\Trackit_20thJune\\src\\main\\java\\resources\\Images\\order (1).png")); // NOI18N
        ordersbtn.setText("Orders");
        ordersbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ordersbtnMouseClicked(evt);
            }
        });
        ordersbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersbtnActionPerformed(evt);
            }
        });

        salesbtn.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        salesbtn.setIcon(new javax.swing.ImageIcon("D:\\Trackit_20thJune\\src\\main\\java\\resources\\Images\\sales.png")); // NOI18N
        salesbtn.setText("Sales");
        salesbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                salesbtnMouseClicked(evt);
            }
        });

        stocksbtn.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        stocksbtn.setIcon(new javax.swing.ImageIcon("D:\\Trackit_20thJune\\src\\main\\java\\resources\\Images\\in-stock.png")); // NOI18N
        stocksbtn.setText("Stocks");
        stocksbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stocksbtnMouseClicked(evt);
            }
        });

        logoutbtn1.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        logoutbtn1.setIcon(new javax.swing.ImageIcon("D:\\Trackit_20thJune\\src\\main\\java\\resources\\Images\\logout.png")); // NOI18N
        logoutbtn1.setText("Logout");
        logoutbtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutbtn1ActionPerformed(evt);
            }
        });

        Logo.setIcon(new javax.swing.ImageIcon("D:\\Trackit_20thJune\\src\\main\\java\\resources\\Images\\logo.png")); // NOI18N

        javax.swing.GroupLayout navLayout = new javax.swing.GroupLayout(nav);
        nav.setLayout(navLayout);
        navLayout.setHorizontalGroup(
            navLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navLayout.createSequentialGroup()
                .addComponent(Logo, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(navLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(navLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dashboardbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productsbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ordersbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salesbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stocksbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logoutbtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        navLayout.setVerticalGroup(
            navLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(Logo, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(dashboardbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(productsbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ordersbtn)
                .addGap(18, 18, 18)
                .addComponent(salesbtn)
                .addGap(18, 18, 18)
                .addComponent(stocksbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logoutbtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        show_win.setBackground(new java.awt.Color(255, 255, 255));
        show_win.setLayout(new java.awt.CardLayout());

        jScrollPane4.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        product_table.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        product_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Product ID", "Product Name", "Category", "Sales Channel", "Metrics", "Quantity", "SKU"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        product_table.setCellSelectionEnabled(true);
        product_table.setDragEnabled(true);
        product_table.setEditingRow(1);
        product_table.setRowHeight(35);
        jScrollPane4.setViewportView(product_table);

        Dashboard.setBackground(new java.awt.Color(255, 255, 255));

        jPanel11.setBackground(new java.awt.Color(0, 0, 0));

        jTextField24.setBackground(new java.awt.Color(0, 0, 0));
        jTextField24.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        jTextField24.setForeground(new java.awt.Color(255, 255, 0));
        jTextField24.setText("200");
        jTextField24.setBorder(null);
        jTextField24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField24ActionPerformed(evt);
            }
        });

        jTextField25.setBackground(new java.awt.Color(0, 0, 0));
        jTextField25.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        jTextField25.setForeground(new java.awt.Color(255, 255, 255));
        jTextField25.setText("N/A");
        jTextField25.setBorder(null);
        jTextField25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField25ActionPerformed(evt);
            }
        });

        jTextField26.setBackground(new java.awt.Color(0, 0, 0));
        jTextField26.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jTextField26.setForeground(new java.awt.Color(255, 255, 255));
        jTextField26.setText("Monthy Orders");
        jTextField26.setBorder(null);
        jTextField26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField26ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jTextField26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jTextField24, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addComponent(jLabel22)))
                .addComponent(jTextField25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21)))
                    .addComponent(jTextField24, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBackground(new java.awt.Color(0, 0, 0));

        jTextField21.setBackground(new java.awt.Color(0, 0, 0));
        jTextField21.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        jTextField21.setForeground(new java.awt.Color(51, 255, 0));
        jTextField21.setText("10,000");
        jTextField21.setBorder(null);
        jTextField21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField21ActionPerformed(evt);
            }
        });

        jTextField22.setBackground(new java.awt.Color(0, 0, 0));
        jTextField22.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        jTextField22.setForeground(new java.awt.Color(255, 255, 255));
        jTextField22.setText("N/A");
        jTextField22.setBorder(null);
        jTextField22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField22ActionPerformed(evt);
            }
        });

        jTextField23.setBackground(new java.awt.Color(0, 0, 0));
        jTextField23.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jTextField23.setForeground(new java.awt.Color(255, 255, 255));
        jTextField23.setText("Monthly Revenue");
        jTextField23.setBorder(null);
        jTextField23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField23ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel20)))
                .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17)))
                    .addComponent(jTextField21, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(0, 0, 0));

        jTextField13.setBackground(new java.awt.Color(0, 0, 0));
        jTextField13.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        jTextField13.setForeground(new java.awt.Color(102, 102, 255));
        jTextField13.setText("40,000");
        jTextField13.setBorder(null);
        jTextField13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField13ActionPerformed(evt);
            }
        });

        jTextField14.setBackground(new java.awt.Color(0, 0, 0));
        jTextField14.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        jTextField14.setForeground(new java.awt.Color(255, 255, 255));
        jTextField14.setText("N/A");
        jTextField14.setBorder(null);
        jTextField14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField14ActionPerformed(evt);
            }
        });

        jTextField15.setBackground(new java.awt.Color(0, 0, 0));
        jTextField15.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jTextField15.setForeground(new java.awt.Color(255, 255, 255));
        jTextField15.setText("Monthly Sales");
        jTextField15.setBorder(null);
        jTextField15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField15ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addComponent(jLabel18)))
                .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)))
                    .addComponent(jTextField13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout DashboardLayout = new javax.swing.GroupLayout(Dashboard);
        Dashboard.setLayout(DashboardLayout);
        DashboardLayout.setHorizontalGroup(
            DashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DashboardLayout.createSequentialGroup()
                .addGap(267, 267, 267)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(707, Short.MAX_VALUE))
            .addGroup(DashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(DashboardLayout.createSequentialGroup()
                    .addGap(129, 129, 129)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(20, 20, 20)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(523, Short.MAX_VALUE)))
        );
        DashboardLayout.setVerticalGroup(
            DashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DashboardLayout.createSequentialGroup()
                .addContainerGap(362, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(200, 200, 200))
            .addGroup(DashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(DashboardLayout.createSequentialGroup()
                    .addGap(207, 207, 207)
                    .addGroup(DashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap(355, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout ProductsLayout = new javax.swing.GroupLayout(Products);
        Products.setLayout(ProductsLayout);
        ProductsLayout.setHorizontalGroup(
            ProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProductsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Dashboard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
                .addGap(1269, 1269, 1269))
        );
        ProductsLayout.setVerticalGroup(
            ProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
            .addGroup(ProductsLayout.createSequentialGroup()
                .addComponent(Dashboard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        show_win.add(Products, "card3");

        orders_table.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        orders_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Order ID", "Product", "Category", "Sales Channel", "Quantity", "Order Date", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orders_table.setRowHeight(35);
        jScrollPane1.setViewportView(orders_table);

        javax.swing.GroupLayout OrdersLayout = new javax.swing.GroupLayout(Orders);
        Orders.setLayout(OrdersLayout);
        OrdersLayout.setHorizontalGroup(
            OrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 2580, Short.MAX_VALUE)
        );
        OrdersLayout.setVerticalGroup(
            OrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
        );

        show_win.add(Orders, "card4");

        sales_table.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        sales_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Sales ID", "Product", "Category", "Sales Channel", "Quantity", "Sale Date", "Purchase Price", "Selling Price", "Total Amount", "Profit"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        sales_table.setRowHeight(35);
        jScrollPane5.setViewportView(sales_table);

        javax.swing.GroupLayout SalesLayout = new javax.swing.GroupLayout(Sales);
        Sales.setLayout(SalesLayout);
        SalesLayout.setHorizontalGroup(
            SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 2580, Short.MAX_VALUE)
        );
        SalesLayout.setVerticalGroup(
            SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
        );

        show_win.add(Sales, "card5");

        stocks_table.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        stocks_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Product Id", "Product", "Category", "Current Stock", "Metrics", "Last Updated"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        stocks_table.setRowHeight(35);
        jScrollPane2.setViewportView(stocks_table);

        javax.swing.GroupLayout StocksLayout = new javax.swing.GroupLayout(Stocks);
        Stocks.setLayout(StocksLayout);
        StocksLayout.setHorizontalGroup(
            StocksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 2580, Short.MAX_VALUE)
        );
        StocksLayout.setVerticalGroup(
            StocksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
        );

        show_win.add(Stocks, "card6");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(nav, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(show_win, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(nav, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(show_win, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ordersbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersbtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ordersbtnActionPerformed

    private void jTextField24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField24ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField24ActionPerformed

    private void jTextField25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField25ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField25ActionPerformed

    private void jTextField26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField26ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField26ActionPerformed

    private void jTextField21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField21ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField21ActionPerformed

    private void jTextField22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField22ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField22ActionPerformed

    private void jTextField23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField23ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField23ActionPerformed

    private void jTextField13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField13ActionPerformed

    private void jTextField14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField14ActionPerformed

    private void jTextField15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField15ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField15ActionPerformed

    private void dashboardbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dashboardbtnMouseClicked
        // TODO add your handling code here:                                       
    CardLayout card = (CardLayout)show_win.getLayout();
    card.show(show_win, "Dashboard");
    updateDashboardInsights();

    }//GEN-LAST:event_dashboardbtnMouseClicked

    private void productsbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productsbtnMouseClicked
        // TODO add your handling code here:
    CardLayout card = (CardLayout)show_win.getLayout();
    card.show(show_win, "Products");
    initProductsTab(); // <-- Refresh products table every time tab is shown
}//GEN-LAST:event_productsbtnMouseClicked

    private void ordersbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ordersbtnMouseClicked
        // TODO add your handling code here:
    CardLayout card = (CardLayout)show_win.getLayout();
    card.show(show_win, "Orders");
    }//GEN-LAST:event_ordersbtnMouseClicked

    private void salesbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salesbtnMouseClicked
        // TODO add your handling code here:
    CardLayout card = (CardLayout)show_win.getLayout();
    card.show(show_win, "Sales");
    initSalesTab();
    }//GEN-LAST:event_salesbtnMouseClicked

    private void stocksbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stocksbtnMouseClicked
        // TODO add your handling code here:
    CardLayout card = (CardLayout)show_win.getLayout();
    card.show(show_win, "Stocks");
    initStocksTab();
        
    }//GEN-LAST:event_stocksbtnMouseClicked

    private void logoutbtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutbtn1ActionPerformed
        // TODO add your handling code here:
        new Login().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logoutbtn1ActionPerformed

    private void initProductsTab() {
        // Load products from DB via Controller
        List<Product> products = controller.getAllProducts();
        productTableModel = new ProductTableModel(products);
        product_table.setModel(productTableModel);
        // Always re-attach editors/renderers

        String[] metricsOptions = {"kg", "pounds", "grams", "tons", "quintals", "packets", "box","pieces"};
        JComboBox<String> metricsCombo = new JComboBox<>(metricsOptions);
        product_table.getColumn("Metrics").setCellEditor(new DefaultCellEditor(metricsCombo));

        String[] categoryOptions = {
            "Groceries", "Raw Materials", "Electronics", "Daily-use", "Household", "Furniture",
            "Assets", "Clothing", "Footwear", "Beauty & Personal Care", "Toys", "Books",
            "Sports", "Automotive", "Jewelry", "Stationery", "Medicines", "Pet Supplies",
            "Garden & Outdoors", "Baby Products", "Food & Beverages", "Health & Wellness",
            "Office Supplies", "Tools & Hardware", "Home Decor", "Mobile & Accessories",
            "Computers & Laptops", "Watches", "Bags & Luggage", "Musical Instruments"
        };
        JComboBox<String> categoryCombo = new JComboBox<>(categoryOptions);
        product_table.getColumn("Category").setCellEditor(new DefaultCellEditor(categoryCombo));

        SpinnerNumberModel spinnerModel = new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1);
        JSpinner spinner = new JSpinner(spinnerModel);
        product_table.getColumn("Quantity").setCellEditor(new DefaultCellEditor(new JTextField()) {
            @Override
            public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
                spinner.setValue(value != null ? value : 0);
                return spinner;
            }
            @Override
            public Object getCellEditorValue() {
                return spinner.getValue();
            }
        });

        // Add Row Button
        JButton addRowBtn = new JButton("Add Row");
        addRowBtn.addActionListener(e -> {
        Product newProduct = new Product(0, "", "Groceries", "", "kg", 0, "", 0.0, 0.0, null);
        productTableModel.addProduct(newProduct);
        int lastRow = productTableModel.getRowCount() - 1;
        product_table.requestFocus();
        product_table.changeSelection(lastRow, 1, false, false);
        product_table.editCellAt(lastRow, 1);
        });

        // Save All Button for products tab
        JButton saveBtn = new JButton("Save All");
        saveBtn.addActionListener(e -> {
            for (int i = 0; i < productTableModel.getRowCount(); i++) {
                Product p = productTableModel.getProductAt(i);
                if (p != null) {
                    if ((p.getSku() == null || p.getSku().trim().isEmpty())
                        && p.getName() != null && !p.getName().trim().isEmpty()
                        && p.getCategory() != null && !p.getCategory().trim().isEmpty()) {
                        p.setSku(Product.generateSKU(p.getCategory(), p.getName()));
                        productTableModel.fireTableCellUpdated(i, 6);
                    }
                    if (p.getId() == 0) {
                        controller.addProduct(p);
                    } else {
                        controller.updateProduct(p);
                    }
                }
            }
            // Reload table after save
            List<Product> updatedProducts = controller.getAllProducts();
            productTableModel = new ProductTableModel(updatedProducts);
            product_table.setModel(productTableModel);
            // Re-attach editors/renderers
            initProductsTab();
            // Refresh the dropdown for products in Orders tab
            initOrdersTab();
            JOptionPane.showMessageDialog(this, "Products saved!");
        });

        // Delete All Button
        JButton deleteAllBtn = new JButton("Delete All");
        deleteAllBtn.addActionListener(e -> {
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete ALL products?", "Confirm Delete All", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                controller.deleteAllProducts();
                productTableModel = new ProductTableModel(controller.getAllProducts());
                product_table.setModel(productTableModel);
                initProductsTab();
                JOptionPane.showMessageDialog(this, "All products deleted!");
            }
        });

        // Delete Button
        JButton deleteBtn = new JButton("Delete");
        deleteBtn.addActionListener(e -> {
            int selectedRow = product_table.getSelectedRow();
            if (selectedRow >= 0) {
                int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this product?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    Product p = productTableModel.getProductAt(selectedRow);
                    if (p != null && p.getId() != 0) {
                        controller.deleteProduct(p.getId());
                    }
                    productTableModel.removeProduct(selectedRow);
                }
                // If NO, do nothing
            } else {
                JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            }
        });

        // Add buttons to panel
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(addRowBtn);
        buttonPanel.add(saveBtn);
        buttonPanel.add(deleteAllBtn);
        buttonPanel.add(deleteBtn);

        Products.setLayout(new BorderLayout());
        Products.add(buttonPanel, BorderLayout.NORTH);
        Products.add(jScrollPane4, BorderLayout.CENTER);
    }

    private void initOrdersTab() {
    List<Order> orders = controller.getAllOrders();
    List<Product> products = controller.getAllProducts(); // Declare only once!
    orderTableModel = new OrderTableModel(orders, products);
    orders_table.setModel(orderTableModel);
    orderTableModel.initDatePicker(orders_table); // Date picker

    // Product dropdown
    String[] productNames = products.stream().map(Product::getName).toArray(String[]::new);
    JComboBox<String> productCombo = new JComboBox<>(productNames);
    orders_table.getColumn("Product").setCellEditor(new DefaultCellEditor(productCombo));

    // Auto-update category and purchase price when product changes
    productCombo.addActionListener(e -> {
        int row = orders_table.getEditingRow();
        String selectedProduct = (String) productCombo.getSelectedItem();
        Product selected = products.stream()
            .filter(p -> p.getName().equals(selectedProduct))
            .findFirst()
            .orElse(null);
        if (row >= 0 && selected != null) {
            orderTableModel.setValueAt(selected.getCategory(), row, 2);
            orders_table.setValueAt(selected.getCategory(), row, 2);
            // Also update the Order object directly
            Order o = orderTableModel.getOrderAt(row);
            if (o != null) {
                o.setCategory(selected.getCategory());
                orderTableModel.setValueAt(selected.getPurchasePrice(), row, 6);
                orders_table.setValueAt(selected.getPurchasePrice(), row, 6);
                o.setPurchasePrice(selected.getPurchasePrice());
                o.setTotalAmount(o.getQuantity() * o.getSellingPrice());
                orderTableModel.fireTableCellUpdated(row, 8);
                orders_table.setValueAt(o.getTotalAmount(), row, 8);
            }
        }
    });


    // Status dropdown
    String[] statusOptions = {"Pending", "Completed", "Cancelled"};
    JComboBox<String> statusCombo = new JComboBox<>(statusOptions);
    orders_table.getColumn("Status").setCellEditor(new DefaultCellEditor(statusCombo));

    // Status color renderer
    orders_table.getColumn("Status").setCellRenderer(new StatusCellRenderer());

    // Date picker for Order Date (as you already have)

    // Add Row Button
    JButton addRowBtn = new JButton("Add Row");
    addRowBtn.addActionListener(e -> {
        Order newOrder = new Order(0, "", "", "", 0, "", "Pending");
        orderTableModel.addOrder(newOrder);
        int lastRow = orderTableModel.getRowCount() - 1;
        orders_table.requestFocus();
        orders_table.changeSelection(lastRow, 1, false, false);
        orders_table.editCellAt(lastRow, 1);
    });

    // Save All Button
    JButton saveBtn = new JButton("Save All");
    saveBtn.addActionListener(e -> {
        for (int i = 0; i < orderTableModel.getRowCount(); i++) {
            Order o = orderTableModel.getOrderAt(i);
            if (o != null) {
                String date = o.getOrderDate();
                if (date == null || date.trim().isEmpty()) {
                    String today = new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date());
                    o.setOrderDate(today);
                    orderTableModel.fireTableCellUpdated(i, 5);
                }
                if (o.getId() == 0) controller.addOrder(o);
                else controller.updateOrder(o);
            }
        }
        List<Order> updatedOrders = controller.getAllOrders();
        // DO NOT redeclare products here, just reuse the existing variable
        orderTableModel = new OrderTableModel(updatedOrders, products);
        orders_table.setModel(orderTableModel);
        orderTableModel.initDatePicker(orders_table);
        JOptionPane.showMessageDialog(this, "Orders saved!");
    });

    // Delete All Button
    JButton deleteAllBtn = new JButton("Delete All");
    deleteAllBtn.addActionListener(e -> {
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete ALL orders?", "Confirm Delete All", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            controller.deleteAllOrders();
            orderTableModel = new OrderTableModel(controller.getAllOrders(), products);
            orders_table.setModel(orderTableModel);
            initOrdersTab();
            JOptionPane.showMessageDialog(this, "All orders deleted!");
        }
    });

    // Delete Button
    JButton deleteBtn = new JButton("Delete");
    deleteBtn.addActionListener(e -> {
        int selectedRow = orders_table.getSelectedRow();
        if (selectedRow >= 0) {
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this order?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                Order o = orderTableModel.getOrderAt(selectedRow);
                if (o != null && o.getId() != 0) {
                    controller.deleteOrder(o.getId());
                }
                orderTableModel.removeOrder(selectedRow);
            }
            // If NO, do nothing
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    });

    JPanel buttonPanel = new JPanel();
    buttonPanel.add(addRowBtn);
    buttonPanel.add(saveBtn);
    buttonPanel.add(deleteAllBtn);
    buttonPanel.add(deleteBtn);

    Orders.setLayout(new BorderLayout());
    Orders.add(buttonPanel, BorderLayout.NORTH);
    Orders.add(jScrollPane1, BorderLayout.CENTER);

    orders_table.getColumn("Status").setCellRenderer(new StatusCellRenderer());
}

    private void initSalesTab() {
        // Get all completed orders
        List<Order> allOrders = controller.getAllOrders();
        List<Order> completedOrders = new ArrayList<>();
        for (Order o : allOrders) {
            if ("Completed".equalsIgnoreCase(o.getStatus())) {
                completedOrders.add(o);
            }
        }
        SalesTableModel salesTableModel = new SalesTableModel(completedOrders);
        sales_table.setModel(salesTableModel);
        sales_table.setEnabled(false); // Make it read-only

        // Highlight profit column
        sales_table.getColumn("Profit").setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                double profit = 0;
                try { profit = Double.parseDouble(value.toString()); } catch (Exception ex) {}
                if (profit > 0) {
                    c.setBackground(new Color(0, 153, 51)); // green
                    c.setForeground(Color.WHITE);
                } else if (profit < 0) {
                    c.setBackground(new Color(204, 0, 0)); // red
                    c.setForeground(Color.WHITE);
                } else {
                    c.setBackground(Color.WHITE);
                    c.setForeground(Color.BLACK);
                }
                setHorizontalAlignment(RIGHT);
                setFont(getFont().deriveFont(Font.BOLD));
                return c;
            }
        });
    }


    private void initStocksTab() {
    List<Product> products = controller.getAllProducts();
    List<Order> orders = controller.getAllOrders();
    StocksTableModel stocksTableModel = new StocksTableModel(products, orders);
    stocks_table.setModel(stocksTableModel);

    // Highlight out of stock rows in red
    stocks_table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            int availableStock = (int) table.getModel().getValueAt(row, 4); // 4 = Available Stock
            if (availableStock <= 0) {
                c.setBackground(new Color(204, 0, 0)); // red
                c.setForeground(Color.WHITE);
            } else {
                c.setBackground(Color.WHITE);
                c.setForeground(Color.BLACK);
            }
            return c;
        }
    });
    stocks_table.setEnabled(false); // Make it read-only
}
    // Renderer for Delete button (shared)
    

class StatusCellRenderer extends DefaultTableCellRenderer {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        String status = value != null ? value.toString() : "";
        c.setFont(c.getFont().deriveFont(Font.BOLD));
        switch (status) {
            case "Completed":
                c.setBackground(new Color(0, 153, 51)); // darker green
                c.setForeground(Color.WHITE);
                break;
            case "Pending":
                c.setBackground(new Color(204, 204, 0)); // darker yellow
                c.setForeground(Color.BLACK);
                break;
            case "Cancelled":
                c.setBackground(new Color(204, 0, 0)); // darker red
                c.setForeground(Color.WHITE);
                break;
            default:
                c.setBackground(Color.WHITE);
                c.setForeground(Color.BLACK);
        }
        return c;
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_Landing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_Landing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_Landing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_Landing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main_Landing().setVisible(true);
        });
    }
    private void initDashboardTab() {
    String[] months = new java.text.DateFormatSymbols().getMonths();
    String[] monthOptions = java.util.Arrays.copyOf(months, 12); // Remove empty 13th entry
    monthCombo = new JComboBox<>(monthOptions);
    monthCombo.setSelectedIndex(java.time.LocalDate.now().getMonthValue() - 1);
    monthCombo.addActionListener(e -> updateDashboardInsights());
    Dashboard.add(monthCombo, BorderLayout.NORTH); // Or wherever you want it
    updateDashboardInsights();
    }

    private void updateDashboardInsights() {
        int selectedMonth = monthCombo.getSelectedIndex() + 1;
        int year = java.time.LocalDate.now().getYear();

        List<Order> orders = controller.getAllOrders();
        List<Product> products = controller.getAllProducts();
            

        double revenue = 0, prevRevenue = 0;
        int totalOrders = 0, prevOrders = 0;
        int totalSales = 0, prevSales = 0;

        int prevMonth = selectedMonth - 1;
        int prevYear = year;
        if (prevMonth == 0) {
            prevMonth = 12;
            prevYear = year - 1;
        }

        for (Order o : orders) {
            if (o.getOrderDate() != null && !o.getOrderDate().isEmpty() && "Completed".equalsIgnoreCase(o.getStatus())) {
                java.time.LocalDate date;
                try { date = java.time.LocalDate.parse(o.getOrderDate()); } catch (Exception ex) { continue; }
                if (date.getYear() == year && date.getMonthValue() == selectedMonth) {
                    revenue += o.getTotalAmount();
                    totalOrders++;
                    totalSales += o.getQuantity();
                } else if (date.getYear() == prevYear && date.getMonthValue() == prevMonth) {
                    prevRevenue += o.getTotalAmount();
                    prevOrders++;
                    prevSales += o.getQuantity();
                }
            }
        }

        // Helper for percent change
        java.util.function.BiFunction<Number, Number, String> percent = (curr, prev) -> {
            if (prev.doubleValue() == 0) return curr.doubleValue() > 0 ? "+100%" : "0%";
            double change = ((curr.doubleValue() - prev.doubleValue()) / prev.doubleValue()) * 100.0;
            return (change >= 0 ? "+" : "") + String.format("%.1f", change) + "%";
        };

        // Set percentage text and color for Revenue
        String revenuePercent = percent.apply(revenue, prevRevenue);
        jTextField22.setText(revenuePercent);
        if (revenuePercent.startsWith("+")) {
            jTextField22.setForeground(new Color(0, 153, 51)); // green
        } else if (revenuePercent.startsWith("-")) {
            jTextField22.setForeground(new Color(204, 0, 0)); // red
        } else {
            jTextField22.setForeground(Color.WHITE);
        }

        // Set percentage text and color for Orders
        String ordersPercent = percent.apply(totalOrders, prevOrders);
        jTextField25.setText(ordersPercent);
        if (ordersPercent.startsWith("+")) {
            jTextField25.setForeground(new Color(0, 153, 51));
        } else if (ordersPercent.startsWith("-")) {
            jTextField25.setForeground(new Color(204, 0, 0));
        } else {
            jTextField25.setForeground(Color.WHITE);
        }

        // Set percentage text and color for Sales
        String salesPercent = percent.apply(totalSales, prevSales);
        jTextField14.setText(salesPercent);
        if (salesPercent.startsWith("+")) {
            jTextField14.setForeground(new Color(0, 153, 51));
        } else if (salesPercent.startsWith("-")) {
            jTextField14.setForeground(new Color(204, 0, 0));
        } else {
            jTextField14.setForeground(Color.WHITE);
        }

        jTextField21.setText(String.valueOf((int) revenue)); // Revenue
        jTextField22.setText(percent.apply(revenue, prevRevenue)); // Revenue %
        jTextField24.setText(String.valueOf(totalOrders));   // Orders
        jTextField25.setText(percent.apply(totalOrders, prevOrders)); // Orders %
        jTextField13.setText(String.valueOf(totalSales));    // Total Sales
        jTextField14.setText(percent.apply(totalSales, prevSales)); // Sales %
        // jTextField18 already set above, jTextField19 is blank for out of stock
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Dashboard;
    private javax.swing.JLabel Logo;
    private javax.swing.JPanel Orders;
    private javax.swing.JPanel Products;
    private javax.swing.JPanel Sales;
    private javax.swing.JPanel Stocks;
    private javax.swing.JButton dashboardbtn;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField23;
    private javax.swing.JTextField jTextField24;
    private javax.swing.JTextField jTextField25;
    private javax.swing.JTextField jTextField26;
    private javax.swing.JButton logoutbtn1;
    private javax.swing.JPanel nav;
    private javax.swing.JTable orders_table;
    private javax.swing.JButton ordersbtn;
    private javax.swing.JTable product_table;
    private javax.swing.JButton productsbtn;
    private javax.swing.JTable sales_table;
    private javax.swing.JButton salesbtn;
    private javax.swing.JPanel show_win;
    private javax.swing.JTable stocks_table;
    private javax.swing.JButton stocksbtn;
    // End of variables declaration//GEN-END:variables

    
}
